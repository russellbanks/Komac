query GetRepositoryInfo($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    id
    defaultBranchRef {
      name
      target {
        __typename
        oid
      }
    }
  }
}

query GetRepositoryId($owner: String!, $name: String!) {
  repository(owner: $owner, name: $name) {
    id
  }
}

mutation CreateRef($repositoryId: ID!, $name: String!, $oid: GitObjectID!) {
  createRef(input: {
    repositoryId: $repositoryId,
    name: $name,
    oid: $oid
  }) {
    ref {
      id
      name
      target {
        __typename
        oid
      }
    }
  }
}

query GetCurrentUserLogin {
  viewer {
    login
  }
}

mutation CreateCommit($input: CreateCommitOnBranchInput!) {
  createCommitOnBranch(input: $input) {
    commit {
      url
    }
  }
}

query GetDirectoryContent($owner: String!, $name: String!, $expression: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $expression) {
      __typename
      ... on Tree {
        entries {
          path
        }
      }
    }
  }
}

query GetDirectoryContentWithText($owner: String!, $name: String!, $expression: String!) {
  repository(owner: $owner, name: $name) {
    object(expression: $expression) {
      __typename
      ... on Tree {
        entries {
          name
          object {
            __typename
            ... on Blob {
              text
            }
          }
        }
      }
    }
  }
}

mutation CreatePullRequest($input: CreatePullRequestInput!){
  createPullRequest(input: $input) {
    pullRequest {
      url
    }
  }
}

query GetDeepDirectoryContent($owner: String!, $name: String!, $expression: String!) {
  repository(name: $name, owner: $owner) {
    object(expression: $expression) {
      __typename
      ... on Tree {
        entries {
          name
          object {
            __typename
            ... on Tree {
              entries {
                type
              }
            }
          }
        }
      }
    }
  }
}

query GetBranches($owner: String!, $name: String!) {
  repository(name: $name, owner: $owner) {
    defaultBranchRef {
      name
    }
    refs(first: 100, refPrefix: "refs/heads/") {
      nodes {
        name
        id
      }
    }
  }
}

query GetPullRequestFromBranch($owner: String!, $name: String!, $baseRefName: String!, $headRefName: String!) {
  repository(name: $name, owner: $owner) {
    pullRequests(first: 1, baseRefName: $baseRefName, headRefName: $headRefName, states: [MERGED, CLOSED]) {
      nodes {
        title
        url
        state
      }
    }
  }
}

query GetAllValues($owner: String!, $name: String!, $tagName: String!) {
  repository(owner: $owner, name: $name) {
    description
    hasIssuesEnabled
    isInOrganization
    licenseInfo {
      key
      pseudoLicense
      spdxId
    }
    object(expression: "HEAD:") {
      __typename
      ... on Tree {
        entries {
          name
          type
        }
      }
    }
    release(tagName: $tagName) {
      description
      url
    }
    repositoryTopics(first: 16) {
      nodes {
        topic {
          name
        }
      }
    }
    url
  }
  organization(login: $owner) {
    url
    websiteUrl
  }
  user(login: $owner) {
    url
  }
}

mutation DeleteRef($ref: ID!) {
  deleteRef(input: {refId: $ref}) {
    __typename
    clientMutationId
  }
}
